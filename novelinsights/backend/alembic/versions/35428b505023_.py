"""

Revision ID: 35428b505023
Revises: 
Create Date: 2025-02-11 00:57:32.050095

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '35428b505023'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('BASE', 'SUMMARIZE_CHAPTER', 'EXTRACT_CHAPTER_KNOWLEDGE', name='prompttype').create(op.get_bind())
    sa.Enum('FAMILY', 'FRIENDSHIP', 'RIVALRY', 'ROMANCE', 'MEMBERSHIP', 'LEADERSHIP', 'ALLIANCE', 'LOCATION', 'POSSESSION', 'KNOWLEDGE', 'INFLUENCE', 'CAUSATION', 'OTHER', name='relationtype').create(op.get_bind())
    sa.Enum('OUTBOUND', 'INBOUND', 'BIDIRECTIONAL', name='relationdirectiontype').create(op.get_bind())
    sa.Enum('ACTIVE', 'DORMANT', 'BROKEN', 'DECEASED', 'HISTORICAL', 'UNKNOWN', name='relationstatustype').create(op.get_bind())
    sa.Enum('BOOK', 'VOLUME', 'ARC', 'CHAPTER', 'SCENE', 'PASSAGE', 'WIKI_ENTRY', 'WORLDBUILDING', 'CHARACTER_SHEET', 'PLOT_OUTLINE', 'PROJECT', 'COLLECTION', 'TIMELINE', 'OTHER', name='contentstructuretype').create(op.get_bind())
    sa.Enum('GLOBAL', 'STRUCTURAL', 'CONTENT_UNIT', name='contextscope').create(op.get_bind())
    sa.Enum('THEME', 'POV', 'AUTHOR_NOTE', 'WORLDBUILDING', 'WRITING_GUIDANCE', 'OTHER', name='contexttype').create(op.get_bind())
    sa.Enum('EVENT', 'TIME_PERIOD', 'CHARACTER', 'ORGANIZATION', 'LOCATION', 'ITEM', 'CONCEPT', 'CULTURE', 'ARC', 'THEME', 'OTHER', name='entitytype').create(op.get_bind())
    sa.Enum('HUMAN', 'AI', name='creationsourcetype').create(op.get_bind())
    sa.Enum('Base', name='agenttype').create(op.get_bind())
    op.create_table('agent_metadata',
    sa.Column('agent_type', postgresql.ENUM('Base', name='agenttype', create_type=False), nullable=False),
    sa.Column('agent_version', sa.String(length=50), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_metadata_created_at'), 'agent_metadata', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_metadata_creation_source'), 'agent_metadata', ['creation_source'], unique=False)
    op.create_index(op.f('ix_agent_metadata_updated_at'), 'agent_metadata', ['updated_at'], unique=False)
    op.create_table('article',
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('type', postgresql.ENUM('EVENT', 'TIME_PERIOD', 'CHARACTER', 'ORGANIZATION', 'LOCATION', 'ITEM', 'CONCEPT', 'CULTURE', 'ARC', 'THEME', 'OTHER', name='entitytype', create_type=False), nullable=False),
    sa.Column('latest_snapshot_id', sa.UUID(), nullable=True),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['latest_snapshot_id'], ['article_snapshot.id'], name='fk_article_latest_snapshot', use_alter=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_article_created_at'), 'article', ['created_at'], unique=False)
    op.create_index(op.f('ix_article_creation_source'), 'article', ['creation_source'], unique=False)
    op.create_index(op.f('ix_article_updated_at'), 'article', ['updated_at'], unique=False)
    op.create_table('content_structure',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', postgresql.ENUM('BOOK', 'VOLUME', 'ARC', 'CHAPTER', 'SCENE', 'PASSAGE', 'WIKI_ENTRY', 'WORLDBUILDING', 'CHARACTER_SHEET', 'PLOT_OUTLINE', 'PROJECT', 'COLLECTION', 'TIMELINE', 'OTHER', name='contentstructuretype', create_type=False), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ts_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('ai_summary', sa.Text(), nullable=True),
    sa.Column('structure_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=False, comment='True if this is published content and should be visible to users'),
    sa.Column('is_canonical', sa.Boolean(), nullable=False, comment='True if this is part of the main book content'),
    sa.Column('is_supplementary', sa.Boolean(), nullable=False, comment='True if this is additional content like worldbuilding'),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['content_structure.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('parent_id', 'sequence', name='unique_sequence_within_parent')
    )
    op.create_index('content_structure_embedding_idx', 'content_structure', ['structure_embedding'], unique=False, postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'structure_embedding': 'vector_cosine_ops'})
    op.create_index('idx_content_structure_canonical', 'content_structure', ['is_canonical'], unique=False)
    op.create_index('idx_content_structure_parent_seq', 'content_structure', ['parent_id', 'sequence'], unique=False)
    op.create_index('idx_content_structure_published', 'content_structure', ['is_published'], unique=False)
    op.create_index('idx_content_structure_type', 'content_structure', ['type'], unique=False)
    op.create_index(op.f('ix_content_structure_created_at'), 'content_structure', ['created_at'], unique=False)
    op.create_index(op.f('ix_content_structure_creation_source'), 'content_structure', ['creation_source'], unique=False)
    op.create_index('ix_content_structure_ts_vector', 'content_structure', ['ts_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_content_structure_updated_at'), 'content_structure', ['updated_at'], unique=False)
    op.create_table('context',
    sa.Column('type', postgresql.ENUM('THEME', 'POV', 'AUTHOR_NOTE', 'WORLDBUILDING', 'WRITING_GUIDANCE', 'OTHER', name='contexttype', create_type=False), nullable=False),
    sa.Column('scope', postgresql.ENUM('GLOBAL', 'STRUCTURAL', 'CONTENT_UNIT', name='contextscope', create_type=False), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=True, comment='Optional ordering within same type/scope'),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug', name='unique_context_slug')
    )
    op.create_index('idx_context_type_scope_seq', 'context', ['type', 'scope', 'sequence'], unique=False)
    op.create_index(op.f('ix_context_created_at'), 'context', ['created_at'], unique=False)
    op.create_index(op.f('ix_context_creation_source'), 'context', ['creation_source'], unique=False)
    op.create_index(op.f('ix_context_updated_at'), 'context', ['updated_at'], unique=False)
    op.create_table('entity',
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('entity_type', postgresql.ENUM('EVENT', 'TIME_PERIOD', 'CHARACTER', 'ORGANIZATION', 'LOCATION', 'ITEM', 'CONCEPT', 'CULTURE', 'ARC', 'THEME', 'OTHER', name='entitytype', create_type=False), nullable=False),
    sa.Column('optional_type', sa.String(length=255), nullable=True),
    sa.Column('additional_types', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('ts_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entity_created_at'), 'entity', ['created_at'], unique=False)
    op.create_index(op.f('ix_entity_creation_source'), 'entity', ['creation_source'], unique=False)
    op.create_index(op.f('ix_entity_entity_type'), 'entity', ['entity_type'], unique=False)
    op.create_index(op.f('ix_entity_name'), 'entity', ['name'], unique=False)
    op.create_index(op.f('ix_entity_optional_type'), 'entity', ['optional_type'], unique=False)
    op.create_index('ix_entity_ts_vector', 'entity', ['ts_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_entity_updated_at'), 'entity', ['updated_at'], unique=False)
    op.create_table('users',
    sa.Column('firebase_uid', sa.String(length=128), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('photo_url', sa.String(length=1024), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('firebase_uid'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_creation_source'), 'users', ['creation_source'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_table('article_snapshot',
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('generated_at', sa.DateTime(), nullable=True),
    sa.Column('parent_structure_id', sa.UUID(), nullable=False),
    sa.Column('current_structure_id', sa.UUID(), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['article.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['current_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['parent_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_article_snapshot_created_at'), 'article_snapshot', ['created_at'], unique=False)
    op.create_index(op.f('ix_article_snapshot_creation_source'), 'article_snapshot', ['creation_source'], unique=False)
    op.create_index(op.f('ix_article_snapshot_updated_at'), 'article_snapshot', ['updated_at'], unique=False)
    op.create_index('ix_user_article_snapshot_unique', 'article_snapshot', ['article_id', 'created_by_id'], unique=True, postgresql_where=sa.text('created_by_id IS NOT NULL'))
    op.create_table('content_unit',
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('context_id', sa.UUID(), nullable=True),
    sa.Column('content_structure_id', sa.UUID(), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=True),
    sa.Column('ts_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('content_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['content_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['context_id'], ['context.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('content_structure_id'),
    sa.UniqueConstraint('content_structure_id', 'sequence', deferrable='True', initially='DEFERRED', name='uq_unit_structure_sequence')
    )
    op.create_index('content_unit_embedding_idx', 'content_unit', ['content_embedding'], unique=False, postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'content_embedding': 'vector_cosine_ops'})
    op.create_index('ix_content_structure_id', 'content_unit', ['content_structure_id'], unique=False)
    op.create_index(op.f('ix_content_unit_created_at'), 'content_unit', ['created_at'], unique=False)
    op.create_index(op.f('ix_content_unit_creation_source'), 'content_unit', ['creation_source'], unique=False)
    op.create_index('ix_content_unit_ts_vector', 'content_unit', ['ts_vector'], unique=False)
    op.create_index(op.f('ix_content_unit_updated_at'), 'content_unit', ['updated_at'], unique=False)
    op.create_index('ix_context_id', 'content_unit', ['context_id'], unique=False)
    op.create_table('context_content_structure',
    sa.Column('context_id', sa.UUID(), nullable=False),
    sa.Column('content_structure_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['content_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['context_id'], ['context.id'], ),
    sa.PrimaryKeyConstraint('context_id', 'content_structure_id')
    )
    op.create_table('entity_state',
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('importance', sa.Integer(), nullable=True, comment='1-5, 1 being the most important'),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('knowledge', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='\n        {\n            "explicit": {}, # Directly stated in text\n            "implicit": {}, # AI-inferred knowledge\n            "situational": {}, # Temporary/contextual information\n            "foundational": {} # Core/persistent information\n        }\n        '),
    sa.Column('ts_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('state_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('agent_metadata_id', sa.UUID(), nullable=False),
    sa.Column('parent_structure_id', sa.UUID(), nullable=False),
    sa.Column('current_structure_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.ForeignKeyConstraint(['agent_metadata_id'], ['agent_metadata.id'], ),
    sa.ForeignKeyConstraint(['current_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], ),
    sa.ForeignKeyConstraint(['parent_structure_id'], ['content_structure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('entity_state_embedding_idx', 'entity_state', ['state_embedding'], unique=False, postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'state_embedding': 'vector_cosine_ops'})
    op.create_index(op.f('ix_entity_state_created_at'), 'entity_state', ['created_at'], unique=False)
    op.create_index(op.f('ix_entity_state_creation_source'), 'entity_state', ['creation_source'], unique=False)
    op.create_index('ix_entity_state_ts_vector', 'entity_state', ['ts_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_entity_state_updated_at'), 'entity_state', ['updated_at'], unique=False)
    op.create_table('prompt_metadata',
    sa.Column('agent_metadata_id', sa.UUID(), nullable=False),
    sa.Column('model', sa.String(length=255), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('prompt_type', postgresql.ENUM('BASE', 'SUMMARIZE_CHAPTER', 'EXTRACT_CHAPTER_KNOWLEDGE', name='prompttype', create_type=False), nullable=False),
    sa.Column('prompt_version', sa.String(length=50), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['agent_metadata_id'], ['agent_metadata.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_prompt_metadata_created_at'), 'prompt_metadata', ['created_at'], unique=False)
    op.create_index(op.f('ix_prompt_metadata_creation_source'), 'prompt_metadata', ['creation_source'], unique=False)
    op.create_index(op.f('ix_prompt_metadata_updated_at'), 'prompt_metadata', ['updated_at'], unique=False)
    op.create_table('relationship',
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.Column('current_status', postgresql.ENUM('ACTIVE', 'DORMANT', 'BROKEN', 'DECEASED', 'HISTORICAL', 'UNKNOWN', name='relationstatustype', create_type=False), nullable=False),
    sa.Column('source_entity_id', sa.UUID(), nullable=False),
    sa.Column('target_entity_id', sa.UUID(), nullable=False),
    sa.Column('direction', postgresql.ENUM('OUTBOUND', 'INBOUND', 'BIDIRECTIONAL', name='relationdirectiontype', create_type=False), nullable=False),
    sa.Column('relationship_type', postgresql.ENUM('FAMILY', 'FRIENDSHIP', 'RIVALRY', 'ROMANCE', 'MEMBERSHIP', 'LEADERSHIP', 'ALLIANCE', 'LOCATION', 'POSSESSION', 'KNOWLEDGE', 'INFLUENCE', 'CAUSATION', 'OTHER', name='relationtype', create_type=False), nullable=False),
    sa.Column('subtype', sa.String(length=255), nullable=True),
    sa.Column('additional_types', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.ForeignKeyConstraint(['source_entity_id'], ['entity.id'], ),
    sa.ForeignKeyConstraint(['target_entity_id'], ['entity.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_relationship_created_at'), 'relationship', ['created_at'], unique=False)
    op.create_index(op.f('ix_relationship_creation_source'), 'relationship', ['creation_source'], unique=False)
    op.create_index(op.f('ix_relationship_current_status'), 'relationship', ['current_status'], unique=False)
    op.create_index(op.f('ix_relationship_direction'), 'relationship', ['direction'], unique=False)
    op.create_index(op.f('ix_relationship_relationship_type'), 'relationship', ['relationship_type'], unique=False)
    op.create_index(op.f('ix_relationship_subtype'), 'relationship', ['subtype'], unique=False)
    op.create_index(op.f('ix_relationship_updated_at'), 'relationship', ['updated_at'], unique=False)
    op.create_table('article_content_unit',
    sa.Column('article_snapshot_id', sa.UUID(), nullable=False),
    sa.Column('content_unit_id', sa.UUID(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=True),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['article_snapshot_id'], ['article_snapshot.id'], ),
    sa.ForeignKeyConstraint(['content_unit_id'], ['content_unit.id'], ),
    sa.PrimaryKeyConstraint('article_snapshot_id', 'content_unit_id'),
    sa.UniqueConstraint('article_snapshot_id', 'sequence', name='uq_article_content_sequence')
    )
    op.create_table('articlesnapshot_entitystate',
    sa.Column('article_snapshot_id', sa.UUID(), nullable=False),
    sa.Column('entity_state_id', sa.UUID(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['article_snapshot_id'], ['article_snapshot.id'], ),
    sa.ForeignKeyConstraint(['entity_state_id'], ['entity_state.id'], ),
    sa.PrimaryKeyConstraint('article_snapshot_id', 'entity_state_id')
    )
    op.create_table('contentunit_contentstructure',
    sa.Column('content_structure_id', sa.UUID(), nullable=False),
    sa.Column('content_unit_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['content_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['content_unit_id'], ['content_unit.id'], ),
    sa.PrimaryKeyConstraint('content_structure_id', 'content_unit_id')
    )
    op.create_table('contentunit_entitystate',
    sa.Column('entity_state_id', sa.UUID(), nullable=False),
    sa.Column('content_unit_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['content_unit_id'], ['content_unit.id'], ),
    sa.ForeignKeyConstraint(['entity_state_id'], ['entity_state.id'], ),
    sa.PrimaryKeyConstraint('entity_state_id', 'content_unit_id')
    )
    op.create_table('context_contentunit',
    sa.Column('context_id', sa.UUID(), nullable=False),
    sa.Column('content_unit_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['content_unit_id'], ['content_unit.id'], ),
    sa.ForeignKeyConstraint(['context_id'], ['context.id'], ),
    sa.PrimaryKeyConstraint('context_id', 'content_unit_id')
    )
    op.create_table('context_entity_state',
    sa.Column('context_id', sa.UUID(), nullable=False),
    sa.Column('entity_state_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['context_id'], ['context.id'], ),
    sa.ForeignKeyConstraint(['entity_state_id'], ['entity_state.id'], ),
    sa.PrimaryKeyConstraint('context_id', 'entity_state_id')
    )
    op.create_table('relationship_contentunit',
    sa.Column('relationship_id', sa.UUID(), nullable=False),
    sa.Column('content_unit_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['content_unit_id'], ['content_unit.id'], ),
    sa.ForeignKeyConstraint(['relationship_id'], ['relationship.id'], ),
    sa.PrimaryKeyConstraint('relationship_id', 'content_unit_id')
    )
    op.create_table('relationship_context',
    sa.Column('relationship_id', sa.UUID(), nullable=False),
    sa.Column('context_id', sa.UUID(), nullable=False),
    sa.Column('source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=True),
    sa.ForeignKeyConstraint(['context_id'], ['context.id'], ),
    sa.ForeignKeyConstraint(['relationship_id'], ['relationship.id'], ),
    sa.PrimaryKeyConstraint('relationship_id', 'context_id')
    )
    op.create_table('relationship_state',
    sa.Column('creation_source', postgresql.ENUM('HUMAN', 'AI', name='creationsourcetype', create_type=False), nullable=False),
    sa.Column('relationship_id', sa.UUID(), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'DORMANT', 'BROKEN', 'DECEASED', 'HISTORICAL', 'UNKNOWN', name='relationstatustype', create_type=False), nullable=False),
    sa.Column('strength', sa.Integer(), nullable=True, comment='1-5, 5 being the strongest connection'),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='\n        Flexible schema for AI generated relationship properties\n        \n        Example:\n        {\n            "status": str,      # e.g., "active", "strained", "broken"\n            "dynamics": str,    # e.g., "supportive", "antagonistic"\n            "evidence": list    # References to supporting content\n        }\n        '),
    sa.Column('agent_metadata_id', sa.UUID(), nullable=False),
    sa.Column('parent_structure_id', sa.UUID(), nullable=False),
    sa.Column('current_structure_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When this record was last modified'),
    sa.ForeignKeyConstraint(['agent_metadata_id'], ['agent_metadata.id'], ),
    sa.ForeignKeyConstraint(['current_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['parent_structure_id'], ['content_structure.id'], ),
    sa.ForeignKeyConstraint(['relationship_id'], ['relationship.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_relationship_state_created_at'), 'relationship_state', ['created_at'], unique=False)
    op.create_index(op.f('ix_relationship_state_creation_source'), 'relationship_state', ['creation_source'], unique=False)
    op.create_index(op.f('ix_relationship_state_updated_at'), 'relationship_state', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_relationship_state_updated_at'), table_name='relationship_state')
    op.drop_index(op.f('ix_relationship_state_creation_source'), table_name='relationship_state')
    op.drop_index(op.f('ix_relationship_state_created_at'), table_name='relationship_state')
    op.drop_table('relationship_state')
    op.drop_table('relationship_context')
    op.drop_table('relationship_contentunit')
    op.drop_table('context_entity_state')
    op.drop_table('context_contentunit')
    op.drop_table('contentunit_entitystate')
    op.drop_table('contentunit_contentstructure')
    op.drop_table('articlesnapshot_entitystate')
    op.drop_table('article_content_unit')
    op.drop_index(op.f('ix_relationship_updated_at'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_subtype'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_relationship_type'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_direction'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_current_status'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_creation_source'), table_name='relationship')
    op.drop_index(op.f('ix_relationship_created_at'), table_name='relationship')
    op.drop_table('relationship')
    op.drop_index(op.f('ix_prompt_metadata_updated_at'), table_name='prompt_metadata')
    op.drop_index(op.f('ix_prompt_metadata_creation_source'), table_name='prompt_metadata')
    op.drop_index(op.f('ix_prompt_metadata_created_at'), table_name='prompt_metadata')
    op.drop_table('prompt_metadata')
    op.drop_index(op.f('ix_entity_state_updated_at'), table_name='entity_state')
    op.drop_index('ix_entity_state_ts_vector', table_name='entity_state', postgresql_using='gin')
    op.drop_index(op.f('ix_entity_state_creation_source'), table_name='entity_state')
    op.drop_index(op.f('ix_entity_state_created_at'), table_name='entity_state')
    op.drop_index('entity_state_embedding_idx', table_name='entity_state', postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'state_embedding': 'vector_cosine_ops'})
    op.drop_table('entity_state')
    op.drop_table('context_content_structure')
    op.drop_index('ix_context_id', table_name='content_unit')
    op.drop_index(op.f('ix_content_unit_updated_at'), table_name='content_unit')
    op.drop_index('ix_content_unit_ts_vector', table_name='content_unit')
    op.drop_index(op.f('ix_content_unit_creation_source'), table_name='content_unit')
    op.drop_index(op.f('ix_content_unit_created_at'), table_name='content_unit')
    op.drop_index('ix_content_structure_id', table_name='content_unit')
    op.drop_index('content_unit_embedding_idx', table_name='content_unit', postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'content_embedding': 'vector_cosine_ops'})
    op.drop_table('content_unit')
    op.drop_index('ix_user_article_snapshot_unique', table_name='article_snapshot', postgresql_where=sa.text('created_by_id IS NOT NULL'))
    op.drop_index(op.f('ix_article_snapshot_updated_at'), table_name='article_snapshot')
    op.drop_index(op.f('ix_article_snapshot_creation_source'), table_name='article_snapshot')
    op.drop_index(op.f('ix_article_snapshot_created_at'), table_name='article_snapshot')
    op.drop_table('article_snapshot')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_creation_source'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_entity_updated_at'), table_name='entity')
    op.drop_index('ix_entity_ts_vector', table_name='entity', postgresql_using='gin')
    op.drop_index(op.f('ix_entity_optional_type'), table_name='entity')
    op.drop_index(op.f('ix_entity_name'), table_name='entity')
    op.drop_index(op.f('ix_entity_entity_type'), table_name='entity')
    op.drop_index(op.f('ix_entity_creation_source'), table_name='entity')
    op.drop_index(op.f('ix_entity_created_at'), table_name='entity')
    op.drop_table('entity')
    op.drop_index(op.f('ix_context_updated_at'), table_name='context')
    op.drop_index(op.f('ix_context_creation_source'), table_name='context')
    op.drop_index(op.f('ix_context_created_at'), table_name='context')
    op.drop_index('idx_context_type_scope_seq', table_name='context')
    op.drop_table('context')
    op.drop_index(op.f('ix_content_structure_updated_at'), table_name='content_structure')
    op.drop_index('ix_content_structure_ts_vector', table_name='content_structure', postgresql_using='gin')
    op.drop_index(op.f('ix_content_structure_creation_source'), table_name='content_structure')
    op.drop_index(op.f('ix_content_structure_created_at'), table_name='content_structure')
    op.drop_index('idx_content_structure_type', table_name='content_structure')
    op.drop_index('idx_content_structure_published', table_name='content_structure')
    op.drop_index('idx_content_structure_parent_seq', table_name='content_structure')
    op.drop_index('idx_content_structure_canonical', table_name='content_structure')
    op.drop_index('content_structure_embedding_idx', table_name='content_structure', postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'structure_embedding': 'vector_cosine_ops'})
    op.drop_table('content_structure')
    op.drop_index(op.f('ix_article_updated_at'), table_name='article')
    op.drop_index(op.f('ix_article_creation_source'), table_name='article')
    op.drop_index(op.f('ix_article_created_at'), table_name='article')
    op.drop_table('article')
    op.drop_index(op.f('ix_agent_metadata_updated_at'), table_name='agent_metadata')
    op.drop_index(op.f('ix_agent_metadata_creation_source'), table_name='agent_metadata')
    op.drop_index(op.f('ix_agent_metadata_created_at'), table_name='agent_metadata')
    op.drop_table('agent_metadata')
    sa.Enum('Base', name='agenttype').drop(op.get_bind())
    sa.Enum('HUMAN', 'AI', name='creationsourcetype').drop(op.get_bind())
    sa.Enum('EVENT', 'TIME_PERIOD', 'CHARACTER', 'ORGANIZATION', 'LOCATION', 'ITEM', 'CONCEPT', 'CULTURE', 'ARC', 'THEME', 'OTHER', name='entitytype').drop(op.get_bind())
    sa.Enum('THEME', 'POV', 'AUTHOR_NOTE', 'WORLDBUILDING', 'WRITING_GUIDANCE', 'OTHER', name='contexttype').drop(op.get_bind())
    sa.Enum('GLOBAL', 'STRUCTURAL', 'CONTENT_UNIT', name='contextscope').drop(op.get_bind())
    sa.Enum('BOOK', 'VOLUME', 'ARC', 'CHAPTER', 'SCENE', 'PASSAGE', 'WIKI_ENTRY', 'WORLDBUILDING', 'CHARACTER_SHEET', 'PLOT_OUTLINE', 'PROJECT', 'COLLECTION', 'TIMELINE', 'OTHER', name='contentstructuretype').drop(op.get_bind())
    sa.Enum('ACTIVE', 'DORMANT', 'BROKEN', 'DECEASED', 'HISTORICAL', 'UNKNOWN', name='relationstatustype').drop(op.get_bind())
    sa.Enum('OUTBOUND', 'INBOUND', 'BIDIRECTIONAL', name='relationdirectiontype').drop(op.get_bind())
    sa.Enum('FAMILY', 'FRIENDSHIP', 'RIVALRY', 'ROMANCE', 'MEMBERSHIP', 'LEADERSHIP', 'ALLIANCE', 'LOCATION', 'POSSESSION', 'KNOWLEDGE', 'INFLUENCE', 'CAUSATION', 'OTHER', name='relationtype').drop(op.get_bind())
    sa.Enum('BASE', 'SUMMARIZE_CHAPTER', 'EXTRACT_CHAPTER_KNOWLEDGE', name='prompttype').drop(op.get_bind())
    # ### end Alembic commands ###
