# Standard library imports
from uuid import uuid4

# SQLAlchemy core imports
from sqlalchemy import (
    Column,
    Index,
    String,
    ForeignKey,
    Boolean,
    Integer,
    Text,
    UniqueConstraint,
    Enum as SQLEnum,
    event
)
from sqlalchemy.dialects.postgresql import (
    UUID,     # For UUID field type
    JSONB,    # For JSON fields with binary storage     # For array fields
    TSVECTOR,
)
from sqlalchemy.orm import relationship, object_session
from pgvector.sqlalchemy import Vector

from novelinsights.models.base import CoreBase, SlugMixin
from novelinsights.types.content import ContentStructureType
    
class ContentStructure(SlugMixin, CoreBase):
    __tablename__ = 'content_structure'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Core fields
    type = Column(SQLEnum(ContentStructureType), nullable=False)
    title = Column(String(255), nullable=False)
    parent_id = Column(UUID(as_uuid=True), ForeignKey('content_structure.id'))
    sequence = Column(Integer) # sequence of the structure within the parent, if applicable
    
    # metadata for the structure
    meta_info = Column('metadata', JSONB)
    
    # Searchable fields
    ts_vector = Column(TSVECTOR) # type, title, meta_info, ai_summary
    ai_summary = Column(Text, nullable=True) # summary of all the content units, plus context, generated by an LLM
    structure_embedding = Column(Vector(1536))  # Adjust dimension based on model
    
    # Flags for different content categories
    is_published = Column(Boolean, nullable=False, default=False,
                        comment="True if this is published content and should be visible to users")
    is_canonical = Column(Boolean, nullable=False, default=False, 
                        comment="True if this is part of the main book content")
    is_supplementary = Column(Boolean, nullable=False, default=False,
                            comment="True if this is additional content like worldbuilding")
    
    # Relationships
    # parent is the parent of the structure (optional)
    parent = relationship(
        "ContentStructure", 
        remote_side=[id], 
        back_populates='children'
    )
    
    # children are the children of the structure (optional)
    children = relationship(
        "ContentStructure",
        back_populates='parent',
        viewonly=True
    )
    
    # content units are the actual content of the structure (optional)
    content_units = relationship(
        'ContentUnit',
        back_populates='structure',
        secondary='contentunit_contentstructure',
        viewonly=True
    )
    
    # contexts are the contexts of the structure (optional)
    contexts = relationship(
        'Context',
        back_populates='structures',
        secondary='context_content_structure',
        viewonly=True
    )
    
    __table_args__ = (
        # Ensure sequence is unique within parent
        UniqueConstraint('parent_id', 'sequence', name='unique_sequence_within_parent'),
        
        # indices
        Index('idx_content_structure_parent_seq', 'parent_id', 'sequence'),
        Index('idx_content_structure_type', 'type'),
        Index('idx_content_structure_published', 'is_published'),
        Index('idx_content_structure_canonical', 'is_canonical'),
        
        # Search
        Index('ix_content_structure_ts_vector', 'ts_vector', postgresql_using='gin'),
        Index(
            'content_structure_embedding_idx',
            structure_embedding,
            postgresql_using='hnsw',
            postgresql_with={'m': 16, 'ef_construction': 64},
            postgresql_ops={'structure_embedding': 'vector_cosine_ops'}
        )
    )
    
# Event listeners for each model
@event.listens_for(ContentStructure, 'before_insert')
@event.listens_for(ContentStructure, 'before_update')
def generate_content_structure_slug(mapper, connection, target):
    session = object_session(target)
    if session and target.title:
        target.slug = SlugMixin._make_unique_slug(
            session,
            ContentStructure,
            target.title,
            target.parent_id,
            getattr(target, 'id', None)
        )