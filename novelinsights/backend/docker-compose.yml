services:
  postgres:
    build: 
      context: ./db
      dockerfile: Dockerfile # backend/db/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - backend_network

  fastapi:
    build:
      context: ./app
      dockerfile: Dockerfile # backend/app/Dockerfile
      target: ${APP_ENV:-dev}    # Uses APP_ENV from .env, defaults to development
    volumes:
      - ./app:/opt/pysetup/app
      - ./app/pyproject.toml:/opt/pysetup/pyproject.toml
      - ./app/poetry.lock:/opt/pysetup/poetry.lock
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=${APP_ENV:-dev}  # Pass APP_ENV to the container
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DEBUG=${DEBUG}
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network

networks:
  backend_network:

volumes:
  postgres_data: